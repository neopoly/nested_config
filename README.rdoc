= neopoly_config

Simple, static, nested application configuration

== Usage

  require 'neopoly/config'

  class MyApp
    def self.configure
      yield config
    end

    def self.config
      @config ||= MyConfig.new
    end

    class MyConfig < Neopoly::Config.new
    end
  end

=== Basic

  MyApp.configure do |config|
    config.coins = 1000
    config.user do |user|
      user.max = 5
    end
    config.queue do |queue|
      queue.workers do |workers
        workers.max = 2
        workers.timeout = 60.seconds
      end
    end
  end

  MyApp.config.coins # => 1000
  MyApp.config.queue.workers.timeout # => 60


=== EvaluateOnce

With the module +EvaluateOnce+ you can define config value which will be evaluated lazily. Once.

  class MyConfig
    include Neopoly::Config::EvaluateOnce
  end

  MyApp.configure do |config|
    config.country_list = proc { Country.all }
  end

  MyApp.config.country_list # => [List of countries]
  MyApp.config.country_list # => [List of countries] (cached)

The initial access to key +country_list+ calls (via +call+ method) the proc and replaces the value.
Subsequent calls just fetch the replaced value.


=== Key names

*Note*: Neopoly::Config is not a blank slate so you CANNOT use defined method names as keys like +object_id+.

== Installation

  gem install neopoly_config

== Test

  rake test
  COVERAGE=1 rake test

== Release

  vim lib/neopoly/config.rb
  # bump VERSION
  rake build
  gem inabox
